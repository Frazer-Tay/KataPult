// src/pages/VocabularyPage.js
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { vocabularyData } from '../data/vocabulary';
import styles from './VocabularyPage.module.css';
import ProgressBar from '../components/ProgressBar';

const shuffleArray = (array) => { if (!Array.isArray(array)) return []; let currentIndex = array.length, randomIndex; while (currentIndex !== 0) { randomIndex = Math.floor(Math.random() * currentIndex); currentIndex--; [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]; } return array; };
const LOCAL_STORAGE_KEY = 'kataPultVocabularyState_v1';
const VocabularyPage = () => {
  const [allItems, setAllItems] = useState([]); const [displayItems, setDisplayItems] = useState([]); const [currentIndex, setCurrentIndex] = useState(0); const [isLoading, setIsLoading] = useState(true); const [error, setError] = useState(null); const pageRef = useRef(null); const nextButtonRef = useRef(null);
  const { currentItem, totalItemsInSet } = useMemo(() => { const item = (displayItems && displayItems.length > 0 && currentIndex < displayItems.length) ? displayItems[currentIndex] : null; return { currentItem: item, totalItemsInSet: displayItems?.length || 0 }; }, [displayItems, currentIndex]);
  const loadData = useCallback((itemsToLoad) => { setIsLoading(true); setError(null); try { if (!itemsToLoad || !Array.isArray(itemsToLoad) || itemsToLoad.length === 0) { throw new Error("No valid vocabulary data found."); } setDisplayItems(shuffleArray([...itemsToLoad])); setCurrentIndex(0); localStorage.removeItem(LOCAL_STORAGE_KEY); console.log("Loaded fresh vocabulary set."); setError(null); } catch (err) { console.error("Error processing vocabulary data:", err); setError(err.message || "Gagal memproses data Vocabulary."); setDisplayItems([]); setCurrentIndex(0); } finally { setIsLoading(false); } }, []);
  useEffect(() => { setIsLoading(true); setError(null); try { const filteredData = vocabularyData.filter(item => item.word && item.definition && item.exampleSentence && item.exampleTranslation); if (filteredData.length === 0) throw new Error("No valid vocabulary data with examples/translations."); setAllItems(filteredData); const savedStateJSON = localStorage.getItem(LOCAL_STORAGE_KEY); if (savedStateJSON) { const savedState = JSON.parse(savedStateJSON); if (savedState && typeof savedState.currentIndex === 'number' && Array.isArray(savedState.displayItemIds) && savedState.displayItemIds.length > 0) { const currentAllItemsMap = new Map(filteredData.map(item => [item.id, item])); const validSavedDisplayItems = savedState.displayItemIds.map(id => currentAllItemsMap.get(id)).filter(Boolean); if(validSavedDisplayItems.length > 0 && savedState.currentIndex < validSavedDisplayItems.length) { console.log("Resuming vocabulary from saved state."); setDisplayItems(validSavedDisplayItems); setCurrentIndex(savedState.currentIndex); } else { console.warn("Invalid vocab saved state (items/index), starting fresh."); localStorage.removeItem(LOCAL_STORAGE_KEY); loadData(filteredData); } } else { console.warn("Invalid vocab saved state structure, starting fresh."); localStorage.removeItem(LOCAL_STORAGE_KEY); loadData(filteredData); } } else { console.log("No saved vocab state, starting fresh."); loadData(filteredData); } } catch (err) { console.error("Error initializing vocabulary page:", err); setError(err.message || "Gagal memuat data Vocabulary."); setAllItems([]); setDisplayItems([]); } finally { setIsLoading(false); } /* eslint-disable-next-line react-hooks/exhaustive-deps */ }, []);
  useEffect(() => { if (isLoading || error || !displayItems || displayItems.length === 0) return; const isCompleted = currentIndex >= displayItems.length; if (isCompleted) { localStorage.removeItem(LOCAL_STORAGE_KEY); return; } try { const stateToSave = { currentIndex: currentIndex, displayItemIds: displayItems.map(item => item.id) }; localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stateToSave)); } catch (err) { console.error("Failed to save vocabulary state:", err); } }, [currentIndex, displayItems, isLoading, error]);
  const handleReshuffleAll = () => { if (allItems.length === 0) return; setIsLoading(true); loadData(allItems); pageRef.current?.focus(); };
  const loadNextWord = useCallback(() => { if (!displayItems || displayItems.length === 0) return; if (currentIndex < displayItems.length) { setCurrentIndex(prevIndex => prevIndex + 1); } }, [currentIndex, displayItems]);
  useEffect(() => { const handleKeyDown = (event) => { if (event.key === 'Enter' && currentItem && currentIndex < totalItemsInSet) { loadNextWord(); event.preventDefault(); } }; const pageElement = pageRef.current; if (pageElement) pageElement.addEventListener('keydown', handleKeyDown); if (nextButtonRef.current && !isLoading && currentItem && currentIndex < totalItemsInSet) { pageRef.current?.focus(); } return () => { if (pageElement) pageElement.removeEventListener('keydown', handleKeyDown); }; }, [loadNextWord, currentItem, isLoading, totalItemsInSet, currentIndex]);
  const isCompleted = currentIndex >= totalItemsInSet && totalItemsInSet > 0 && !isLoading;
  if (isLoading) { return <div className="loading">Memuat kata...</div>; }
  if (error) { return <div className="error">{error}</div>; }
  return ( <div className={styles.container} ref={pageRef} tabIndex={-1}> {!isCompleted && totalItemsInSet > 0 && ( <ProgressBar current={currentIndex + 1} total={totalItemsInSet} label="Vocabulary Progress" /> )} {isCompleted ? ( <div className={styles.completionContainer}> <p className="completionMessage">✨ Selesai Melihat Vocabulary! ✨</p> <button className="primaryButton" onClick={handleReshuffleAll} autoFocus>Mulai Lagi Semua</button> </div> ) : currentItem ? ( <> <div className={styles.card}> <h2 className={styles.word}>{currentItem.word}</h2> <p className={styles.definition}>{currentItem.definition}</p> {currentItem.exampleSentence && ( <div className={styles.exampleSection}> <h3 className={styles.sectionTitle}>Contoh Penggunaan</h3> <p className={styles.exampleSentence}>"{currentItem.exampleSentence}"</p> {currentItem.exampleTranslation && ( <div className={styles.translationSection}> <p className={styles.translationText}><em>(Translation: {currentItem.exampleTranslation})</em></p> </div> )} </div> )} </div> <button className="nextButton" onClick={loadNextWord} ref={nextButtonRef}> Lanjut <span className="arrowIcon">→</span> </button> </> ) : ( <p className="loading">Tidak ada data vocabulary.</p> )} </div> );
};
export default VocabularyPage;